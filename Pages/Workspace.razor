@page "/workspace/{microgridId}"

@using Blazorwasm.Shared
@using Blazorwasm.Models
@using System.Net.Http.Json
@using System.Collections.ObjectModel
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<div class="full-height grid-background">
    <h3 class="text-center pt-6">Microgrid ID: @microgridId</h3>
    <div class="d-flex flex-nowrap justify-content-end mt-4 pr-6">
        <MudChip Icon="@Icons.Material.Filled.AddCircle" OnClick="@AddElement" Color="Color.Primary" >Add Element</MudChip>
    </div>
    <div class="main-timeline mt-5">
        @foreach (var (element, index) in Elements.Select((element, index) => (element, index)))
        {
            <div class="timeline">
                <div class="icon"></div>
                <div class="element-content">
                    <div class="element-outer">
                        <span class="element">
                            <span class="type">@element.type</span>
                        </span>
                        <img src="images/@(element.type).png" class="image"/>
                        <div class="element-buttons">
                            <MudIconButton class="mr-3" OnClick="@(() => OpenDrawer(Anchor.End, index))" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium"/>
                            <MudIconButton class="mr-3" OnClick="@(() => CopyElement(index))" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium"/>
                            <MudIconButton OnClick="@(() => DeleteGrid(index))" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium"/>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <MudDrawer @bind-Open="@open" Width="@width" Height="@height" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">
        <div class="mx-5">
            <ElementColumn DrawerIndex="@drawIndex" Elements="@Elements"></ElementColumn>
        </div>
    </MudDrawer>
    
</div>

@code {
    [Parameter] 
    public Microgrid[] Grids { get; set; } = new Microgrid[]{};

    [Parameter] 
    public string microgridId { get; set; } = "";

    List<Element> Elements = new List<Element>
    {
        new Element {name = "1", timeHorizon = "1", type = "CDG", SellingPower = { 9.0, 7.9, 7.2, 6.9, 6.2, 6.2, 5.5, 6.5, 7.0 }, maximumBuyingPower = 3.4, minimumBuyingPower = 1.2, maximumSellingPower = 4.1, minimumSellingPower = 1.1},
        new Element {name = "2", timeHorizon = "2", type = "ESS", SellingPower = { 1.0, 4.1, 3.5, 5.1, 4.9, 6.2, 6.9, 9.1, 1.48 }, maximumBuyingPower = 3.4, minimumBuyingPower = 1.2, maximumSellingPower = 3.9, minimumSellingPower = 1.2},
        new Element {name = "3", timeHorizon = "1", type = "LOAD", SellingPower = { 9.0, 7.9, 7.2, 6.9, 6.2, 6.2, 5.5, 6.5, 7.0 }, maximumBuyingPower = 3.4, minimumBuyingPower = 1.2, maximumSellingPower = 3.5, minimumSellingPower = 1.1},
        new Element {name = "5", timeHorizon = "3", type = "CDG", SellingPower = { 9.0, 7.9, 7.2, 6.9, 6.2, 6.2, 5.5, 6.5, 7.0 }, maximumBuyingPower = 3.4, minimumBuyingPower = 1.2, maximumSellingPower = 4.0, minimumSellingPower = 1.5},
        new Element {name = "4", timeHorizon = "2", type = "RDG", SellingPower = { 1.0, 4.1, 3.5, 5.1, 4.9, 6.2, 6.9, 9.1, 1.48 }, maximumBuyingPower = 3.4, minimumBuyingPower = 1.2, maximumSellingPower = 3.7, minimumSellingPower = 1.2}
    };  

    public void CopyElement(int index)
    {
        // 检查索引是否在合法范围内
        if (index >= 0 && index < Elements.Count)
        {
            // 复制指定索引处的元素，并插入到列表中
            Elements.Insert(index, Elements[index]);
        }
        else
        {
            // 处理索引越界的情况，这里可以抛出异常或者执行其他逻辑
            Console.WriteLine("Invalid index for CopyElement");
        }
    }

    public void AddElement() {
        var options = new DialogOptions {CloseButton = true, DisableBackdropClick = true};
        DialogService.Show<AddElement_Dialog>("Input", options);
    }
     
    bool open;
    Anchor anchor;
    int drawIndex;
    string width = "", height = "";

    int OpenDrawer(Anchor anchor, int index)
    {
        open = true;
        this.anchor = anchor;
        switch (anchor)
        {
            case Anchor.End:
                width = "400px";
                height = "100%";
                break;
        }
        drawIndex = index;
        return index;
    }

    public void DeleteGrid(int index) {
        // 检查索引是否在合法范围内
        if (index >= 0 && index < Elements.Count)
        {
            Elements.RemoveAt(index);
        }
        else
        {
            // 处理索引越界的情况，这里可以抛出异常或者执行其他逻辑
            Console.WriteLine("Invalid index for DeleteGrid");
        }
    }
}


