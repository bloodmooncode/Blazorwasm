@page "/microgrids"
@using Blazorwasm.Shared
@using Blazorwasm.Models
@using System.Net.Http.Json
@using System.Collections.ObjectModel
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<div class="full-height" style="padding-top: 50px">
    <h2 class="px-5">Microgrid List</h2>
    <MudDataGrid class="px-5 border-none" @ref="dataGrid" MultiSelection="true" Items="@Elements" Filterable="false"
    Hideable="true" Groupable="true" GroupExpanded="false" GroupClassFunc="GroupClassFunc">
        <ToolBarContent>
            <div class="d-flex flex-nowrap mt-4">
                <MudButton OnClick="@ExpandAllGroups" Color="@Color.Primary">Expand</MudButton>
                <MudButton OnClick="@CollapseAllGroups" Color="@Color.Primary" class="ml-5">Collapse</MudButton>
            </div>
            <MudSpacer />
            <div class="d-flex flex-nowrap mt-4">
                <MudChip Text="green" Variant="Variant.Text" OnClick="@AddItem" Color="Color.Success">ADD ITEM</MudChip>
                <MudChip Text="red" Variant="Variant.Text" OnClick="@RemoveItem" Color="Color.Error" class="ml-5">DELETE ITEM</MudChip>
            </div>
        </ToolBarContent>
        

        <Columns>
            <PropertyColumn Property="x => x.id" Title="Id" Filterable="false" Groupable="false" />
            <PropertyColumn Property="x => x.userId" Title="User" />    
            <PropertyColumn Property="x => x.name" Title="Name"/>

            <PropertyColumn Property="x => x.timeHorizon" Title="Time"/>
            <PropertyColumn Property="x => x.type" Title="Type" Grouping>
                <GroupTemplate>
                    <span style="font-weight:bold">Group: @context.Grouping.Key <MudChip Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">total @context.Grouping.Count()</MudChip></span>
                </GroupTemplate>
            </PropertyColumn>
            
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@Microdetail" />
                </CellTemplate>
            </TemplateColumn>

        </Columns>
        <PagerContent>
            <MudDataGridPager T="Element" />
        </PagerContent>
    </MudDataGrid>
</div>

<style>
    html, body, #app {
        height: 100%;
        margin: 0;
    }

    .full-height {
        height: 100%;
        overflow-y: auto;
    }
</style>

@code {
        ObservableCollection<Element> Elements = new ObservableCollection<Element> {
        new Element { id = 1, userId = 1, name = "Microgrid1", timeHorizon = "1", type = "CDG" },
        new Element { id = 2, userId = 2, name = "Microgrid2", timeHorizon = "2", type = "ESS" },
        new Element { id = 3, userId = 3, name = "Microgrid3", timeHorizon = "3", type = "RDG" },
        new Element { id = 4, userId = 4, name = "Microgrid4", timeHorizon = "4", type = "Load" },
        new Element { id = 5, userId = 3, name = "Microgrid5", timeHorizon = "5", type = "ESS" },
        new Element { id = 6, userId = 2, name = "Microgrid6", timeHorizon = "6", type = "RDG" },
        new Element { id = 7, userId = 4, name = "Microgrid7", timeHorizon = "7", type = "Load" },
        new Element { id = 8, userId = 2, name = "Microgrid8", timeHorizon = "8", type = "ESS" },
        new Element { id = 9, userId = 3, name = "Microgrid9", timeHorizon = "9", type = "RDG" },
        new Element { id = 10, userId = 4, name = "Microgrid10", timeHorizon = "10", type = "CDG" },
        new Element { id = 11, userId = 1, name = "Microgrid11", timeHorizon = "11", type = "ESS" },
        new Element { id = 12, userId = 2, name = "Microgrid12", timeHorizon = "12", type = "RDG" },
        new Element { id = 13, userId = 3, name = "Microgrid13", timeHorizon = "13", type = "Load" },
        new Element { id = 14, userId = 4, name = "Microgrid14", timeHorizon = "14", type = "ESS" },
        new Element { id = 15, userId = 3, name = "Microgrid15", timeHorizon = "15", type = "RDG" },
        new Element { id = 16, userId = 2, name = "Microgrid16", timeHorizon = "16", type = "Load" },
        new Element { id = 17, userId = 4, name = "Microgrid17", timeHorizon = "17", type = "ESS" },
        new Element { id = 18, userId = 2, name = "Microgrid18", timeHorizon = "18", type = "RDG" },
        new Element { id = 19, userId = 3, name = "Microgrid19", timeHorizon = "19", type = "Load" },
        new Element { id = 20, userId = 4, name = "Microgrid20", timeHorizon = "20", type = "CDG" },
        new Element { id = 21, userId = 1, name = "Microgrid21", timeHorizon = "21", type = "ESS" },
        new Element { id = 22, userId = 2, name = "Microgrid22", timeHorizon = "22", type = "RDG" },
        new Element { id = 23, userId = 3, name = "Microgrid23", timeHorizon = "23", type = "Load" },
    };
        
    MudDataGrid<Element> dataGrid;
    bool _customizeGroupTemplate = true;
    static bool _customizeGroupBy;
    static string[] _nonmetals = new string[] { "H", "He","N", "O", "F", "Ne", "Cl", "Ar", "Kr", "Xe", "Rn", "Br", "C", "P", "Se", "Se", "I" };

    private string GroupClassFunc(GroupDefinition<Element> item)
    {
        return item.Grouping.Key?.ToString() == "Nonmetal" || item.Grouping.Key?.ToString() == "Other"
                ? "mud-theme-warning"
                : string.Empty;
    }

    void ExpandAllGroups()
    {
        dataGrid?.ExpandAllGroups();
    }

    void CollapseAllGroups()
    {
        dataGrid?.CollapseAllGroups();
    }

    void CustomizeByGroupChanged(bool isChecked)
    {
        _customizeGroupBy = isChecked;
        dataGrid.GroupItems();
    }

    int cnt = 23;
    void AddItem()
    {
        cnt++;
        Random rnd = new Random();
        int userId = rnd.Next(1, 5);
        String[] types = new String[] { "CDG", "ESS", "RDG", "Load" };
        Elements.Add(new Element { id = cnt, userId = userId, name = $"Microgrid{cnt}", timeHorizon = $"{cnt}", type = types[rnd.Next(0, 4)] });
    }

    void RemoveItem()
    {
        if (Elements.Any())
        {
            Elements.RemoveAt(0);
        }
    }

    void Microdetail()
    {
        NavigationManager.NavigateTo("/dashboard");
    }
}