@inject NavigationManager NavigationManager
@using System;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Blazor.Diagrams;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Core.Models.Base;
@using Blazor.Diagrams.Extensions;
@using Blazorwasm.Models;
@inject HttpClient httpClient

<h3 class="mt-5">Properties Panel</h3>

@if (Elements != null && Elements.Count > 0)
{
    <div class="d-flex fs-6 fw-semibold">
        <div class="my-5 mr-6">Element Name : @Elements[DrawerIndex].name</div>
        <div class="my-5">Type : @Elements[DrawerIndex].type</div>
    </div>

    <table>
        <tr>
            <td>
                <MudChip Icon="@Icons.Material.Filled.ElectricBolt" Color="Color.Success" style="margin-left: 0px;"><div>MinBuying : @Elements[DrawerIndex].minimumBuyingPower</div></MudChip>
            </td>
            <td>
                <MudChip Icon="@Icons.Material.Filled.PowerSettingsNew" Color="Color.Secondary"><div>MaxBuying : @Elements[DrawerIndex].maximumBuyingPower</div></MudChip>
            </td>
        </tr>
        <tr>
            <td>
                <MudChip Icon="@Icons.Material.Filled.ElectricBolt" Color="Color.Success" style="margin-left: 0px;"><div>MinSelling : @Elements[DrawerIndex].minimumSellingPower</div></MudChip>
            </td>
            <td>
                <MudChip Icon="@Icons.Material.Filled.PowerSettingsNew" Color="Color.Secondary"><div>MaxSelling : @Elements[DrawerIndex].maximumSellingPower</div></MudChip>
            </td>
        </tr>
    </table>

    <table class="table table-striped mt-5">
        <thead>
            <tr>
                @foreach (var h in headings)
                {
                    <th>@h</th>
                }
            </tr>
        </thead>

        <tbody>
            @foreach (var sellingPower in sellingPowers)
            {
                <tr class="align-middle">
                    <td>
                        <div>@sellingPower.timeHorizon</div>
                    </td>
                    <td>
                        <div>@sellingPower.sellingpower</div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}

<div class="text-center mt-5" style="color: #3b0fdb; cursor: pointer;" @onclick="jumptoDash">Go to the Visual Panel</div>

@code {
    [Parameter]
    public int DrawerIndex { get; set; }
    [Parameter]
    public String MicrogridId { get; set; }

    public List<Element> Elements { get; set; } = new List<Element>();

    private List<SellingPower> sellingPowers { get; set; } = new List<SellingPower>();
    
    string[] headings = {"Time", "Value"};
    
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            string url = $"/api/microgrids/{MicrogridId}/elements/all";
            // Fetch elements from the API when the component is initialized
            Elements = await httpClient.GetFromJsonAsync<List<Element>>(url);
            // Check if Elements list is not null and contains elements
            if (Elements != null && Elements.Count > 0 && DrawerIndex >= 0 && DrawerIndex < Elements.Count)
            {
                // Get the elementId of the current selected element
                int elementId = Elements[DrawerIndex].id;
                
                // Call GetSellingPowers method to fetch selling powers data
                await GetSellingPowers(elementId);
            }
        }
        catch (HttpRequestException ex)
        {
            // Handle HTTP request exceptions
            Console.WriteLine($"HTTP request exception occurred: {ex.Message}");
            // You can also show an error message to the user or perform other actions as needed
        }
        catch (Exception ex)
        {
            // Handle other types of exceptions
            Console.WriteLine($"An error occurred: {ex.Message}");
            // You can also show an error message to the user or perform other actions as needed
        }
    }

    protected async Task GetSellingPowers(int elementId)
    {
        try
        {
            string url = $"/api/elements/{elementId}/sellingPowers/all";
            // Fetch microgrids from the API when the component is initialized
            sellingPowers = await httpClient.GetFromJsonAsync<List<SellingPower>>(url);
            Console.WriteLine(sellingPowers);
        }
        catch (HttpRequestException ex)
        {
            // Handle HTTP request exceptions
            Console.WriteLine($"HTTP request exception occurred: {ex.Message}");
            // You can also show an error message to the user or perform other actions as needed
        }
        catch (Exception ex)
        {
            // Handle other types of exceptions
            Console.WriteLine($"An error occurred: {ex.Message}");
            // You can also show an error message to the user or perform other actions as needed
        }
    }

    protected void jumptoDash() {
        NavigationManager.NavigateTo("/dashboard");
    }
}
